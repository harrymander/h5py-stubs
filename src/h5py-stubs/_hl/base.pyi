from collections.abc import (
    ItemsView,
    Iterator,
    KeysView,
    Mapping,
    MutableMapping,
    ValuesView,
)
from os import PathLike
from typing import Any

import numpy as np
from h5py._hl.attrs import AttributeManager
from numpy.typing import ArrayLike, DTypeLike

from .files import File

def is_hdf5(fname: str | bytes | PathLike[str]) -> bool: ...

class CommonStateObject: ...

class _RegionProxy:
    def __getitem__(self, args: Any):  # h5r.RegionReference TODO
        ...
    def shape(self, ref) -> tuple[int, ...]: ...  # TODO ref: h5r.RegionReference
    def selection(self, ref) -> tuple[int, ...]: ...  # TODO ref: h5r.RegionReference

class HLObject(CommonStateObject):
    @property
    def file(self) -> File: ...
    @property
    def name(self) -> str | None: ...
    @property
    def parent(self) -> HLObject: ...
    @property
    def id(self):  # -> h5f.FileID TODO
        ...
    @property
    def ref(self):  # -> h5r.Reference TODO
        ...
    @property
    def regionref(self) -> _RegionProxy: ...
    @property
    def attrs(self) -> AttributeManager: ...
    def __init__(self, oid) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other) -> bool: ...

class KeysViewHDF5(KeysView[str]): ...
class ValuesViewHDF5(ValuesView[HLObject]): ...
class ItemsViewHDF5(ItemsView[str, HLObject]): ...

class MappingHDF5(Mapping[str, HLObject]):
    def keys(self) -> KeysViewHDF5: ...
    def values(self) -> ValuesViewHDF5: ...
    def items(self) -> ItemsViewHDF5: ...
    def __getitem__(self, name: str) -> HLObject: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...

class MutableMappingHDF5(MappingHDF5, MutableMapping[str, HLObject]):
    def __delitem__(self, name: str) -> None: ...
    def __setitem__(
        self,
        name: str,
        val: HLObject | np.dtype[Any] | ArrayLike,
    ) -> None: ...

class Empty:
    @property
    def shape(self) -> None: ...
    @property
    def size(self) -> None: ...
    @property
    def dtype(self) -> np.dtype: ...
    def __init__(self, dtype: DTypeLike) -> None: ...
    def __eq__(self, other) -> bool: ...
