"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from .. import h5d
from .base import HLObject, with_phil
from .vds import vds_support

"""
    Implements support for high-level dataset access.
"""
_LEGACY_GZIP_COMPRESSION_VALS = ...
MPI = ...

def make_new_dset(
    parent,
    shape=...,
    dtype=...,
    data=...,
    name=...,
    chunks=...,
    compression=...,
    shuffle=...,
    fletcher32=...,
    maxshape=...,
    compression_opts=...,
    fillvalue=...,
    scaleoffset=...,
    track_times=...,
    external=...,
    track_order=...,
    dcpl=...,
    dapl=...,
    efile_prefix=...,
    virtual_prefix=...,
    allow_unknown_filter=...,
    rdcc_nslots=...,
    rdcc_nbytes=...,
    rdcc_w0=...,
    *,
    fill_time=...,
):
    """Return a new low-level dataset identifier"""
    ...

def open_dset(
    parent,
    name,
    dapl=...,
    efile_prefix=...,
    virtual_prefix=...,
    rdcc_nslots=...,
    rdcc_nbytes=...,
    rdcc_w0=...,
    **kwds,
):
    """Return an existing low-level dataset identifier"""
    ...

class AbstractView(ABC):
    _dset: Dataset
    def __init__(self, dset) -> None: ...
    def __len__(self):  # -> int:
        ...
    @property
    @abstractmethod
    def dtype(self):  # -> None:
        ...
    @property
    def ndim(self): ...
    @property
    def shape(self): ...
    @property
    def size(self):  # -> Literal[1] | None:
        ...
    @abstractmethod
    def __getitem__(self, idx):  # -> None:
        ...
    def __array__(self, dtype=..., copy=...):  # -> NDArray[Any]:
        ...

class AsTypeView(AbstractView):
    """Wrapper to convert data on reading from a dataset."""
    def __init__(self, dset, dtype) -> None: ...
    @property
    def dtype(self):  # -> Any:
        ...
    def __getitem__(self, idx): ...
    def __array__(self, dtype=..., copy=...):  # -> _Array1D[float64]:
        ...

class AsStrView(AbstractView):
    """Wrapper to decode strings on reading the dataset"""
    def __init__(self, dset, encoding, errors=...) -> None: ...
    @property
    def dtype(self):  # -> dtype[object_ | Any]:
        ...
    def __getitem__(self, idx):  # -> str | NDArray[Any]:
        ...

class FieldsView(AbstractView):
    """Wrapper to extract named fields from a dataset with a struct dtype"""
    def __init__(self, dset, prior_dtype, names) -> None: ...
    @property
    def dtype(self):  # -> dtype[Any] | dtype[void]:
        ...
    def __getitem__(self, idx): ...

def readtime_dtype(basetype, names):  # -> dtype[void]:
    """Make a NumPy compound dtype with a subset of available fields"""
    ...

if MPI:
    class CollectiveContext:
        """Manages collective I/O in MPI mode"""
        def __init__(self, dset) -> None: ...
        def __enter__(self):  # -> None:
            ...
        def __exit__(self, *args):  # -> None:
            ...

class ChunkIterator:
    """
    Class to iterate through list of chunks of a given dataset
    """
    def __init__(self, dset, source_sel=...) -> None: ...
    def __iter__(self):  # -> Self:
        ...
    def __next__(self):  # -> tuple[Any, ...]:
        ...

class Dataset(HLObject):
    """
    Represents an HDF5 dataset
    """
    def astype(self, dtype):  # -> Self | AsTypeView:
        """Get a wrapper allowing you to perform reads to a
        different destination type, e.g.:

        >>> double_precision = dataset.astype('f8')[0:100:2]
        """
        ...

    def asstr(self, encoding=..., errors=...):  # -> AsStrView:
        """Get a wrapper to read string data as Python strings:

        >>> str_array = dataset.asstr()[:]

        The parameters have the same meaning as in ``bytes.decode()``.
        If ``encoding`` is unspecified, it will use the encoding in the HDF5
        datatype (either ascii or utf-8).

        .. note::
           On NumPy 2.0 and later, it is recommended to use native NumPy
           variable-width strings instead:

           >>> str_array = dataset.astype('T')[:]
        """
        ...

    def fields(self, names, *, _prior_dtype=...):  # -> FieldsView:
        """Get a wrapper to read a subset of fields from a compound data type:

        >>> 2d_coords = dataset.fields(['x', 'y'])[:]

        If names is a string, a single field is extracted, and the resulting
        arrays will have that dtype. Otherwise, it should be an iterable,
        and the read data will have a compound dtype.
        """
        ...

    if MPI:
        @property
        def collective(self):  # -> CollectiveContext:
            """Context manager for MPI collective reads & writes"""
            ...

    @property
    def dims(self):  # -> DimensionManager:
        """Access dimension scales attached to this dataset."""
        ...

    @property
    def ndim(self):
        """Numpy-style attribute giving the number of dimensions"""
        ...

    @property
    def shape(self):
        """Numpy-style shape tuple giving dataset dimensions"""
        ...

    @shape.setter
    def shape(self, shape):  # -> None:
        ...
    @property
    def size(self):  # -> Literal[1] | None:
        """Numpy-style attribute giving the total dataset size"""
        ...

    @property
    def nbytes(self):  # -> Literal[0]:
        """Numpy-style attribute giving the raw dataset size as the number of bytes"""
        ...

    @property
    def dtype(self):
        """Numpy dtype representing the datatype"""
        ...

    @property
    def chunks(self):  # -> None:
        """Dataset chunks (or None)"""
        ...

    @property
    def compression(self):  # -> Literal['gzip', 'lzf', 'szip'] | None:
        """Compression strategy (or None)"""
        ...

    @property
    def compression_opts(self):
        """Compression setting.  Int(0-9) for gzip, 2-tuple for szip."""
        ...

    @property
    def shuffle(self):  # -> bool:
        """Shuffle filter present (T/F)"""
        ...

    @property
    def fletcher32(self):  # -> bool:
        """Fletcher32 filter is present (T/F)"""
        ...

    @property
    def scaleoffset(self):  # -> None:
        """Scale/offset filter settings. For integer data types, this is
        the number of bits stored, or 0 for auto-detected. For floating
        point data types, this is the number of decimal places retained.
        If the scale/offset filter is not in use, this is None."""
        ...

    @property
    def external(self):  # -> list[Any] | None:
        """External file settings. Returns a list of tuples of
        (name, offset, size) for each external file entry, or returns None
        if no external files are used."""
        ...

    @property
    def maxshape(self):  # -> tuple[Any | None, ...] | None:
        """Shape up to which this dataset can be resized.  Axes with value
        None have no resize limit."""
        ...

    @property
    def fillvalue(self):  # -> Any:
        """Fill value for this dataset (0 by default)"""
        ...

    def __init__(self, bind, *, readonly=...) -> None:
        """Create a new Dataset object by binding to a low-level DatasetID."""
        ...

    def resize(self, size, axis=...):  # -> None:
        """Resize the dataset, or the specified axis.

        The dataset must be stored in chunked format; it can be resized up to
        the "maximum shape" (keyword maxshape) specified at creation time.
        The rank of the dataset cannot be changed.

        "Size" should be a shape tuple, or if an axis is specified, an integer.

        BEWARE: This functions differently than the NumPy resize() method!
        The data is not "reshuffled" to fit in the new shape; each axis is
        grown or shrunk independently.  The coordinates of existing data are
        fixed.
        """
        ...

    def __len__(self):
        """The size of the first axis.  TypeError if scalar.

        Limited to 2**32 on 32-bit systems; Dataset.len() is preferred.
        """
        ...

    def len(self):
        """The size of the first axis.  TypeError if scalar.

        Use of this method is preferred to len(dset), as Python's built-in
        len() cannot handle values greater then 2**32 on 32-bit systems.
        """
        ...

    def __iter__(self):  # -> Generator[Any, Any, None]:
        """Iterate over the first axis.  TypeError if scalar.

        BEWARE: Modifications to the yielded data are *NOT* written to file.
        """
        ...

    def iter_chunks(self, sel=...):  # -> ChunkIterator:
        """Return chunk iterator.  If set, the sel argument is a slice or
        tuple of slices that defines the region to be used. If not set, the
        entire dataspace will be used for the iterator.

        For each chunk within the given region, the iterator yields a tuple of
        slices that gives the intersection of the given chunk with the
        selection area.

        A TypeError will be raised if the dataset is not chunked.

        A ValueError will be raised if the selection region is invalid.

        """
        ...

    def __getitem__(self, args, new_dtype=...):
        """Read a slice from the HDF5 dataset.

        Takes slices and recarray-style field names (more than one is
        allowed!) in any order.  Obeys basic NumPy rules, including
        broadcasting.

        Also supports:

        * Boolean "mask" array indexing
        """
        ...

    def __setitem__(self, args, val):
        """Write to the HDF5 dataset from a Numpy array.

        NumPy's broadcasting rules are honored, for "simple" indexing
        (slices and integers).  For advanced indexing, the shapes must
        match.
        """
        ...

    def read_direct(self, dest, source_sel=..., dest_sel=...):  # -> None:
        """Read data directly from HDF5 into an existing NumPy array.

        The destination array must be C-contiguous and writable.
        Selections must be the output of numpy.s_[<args>].

        Broadcasting is supported for simple indexing.
        """
        ...

    def write_direct(self, source, source_sel=..., dest_sel=...):  # -> None:
        """Write data directly to HDF5 from a NumPy array.

        The source array must be C-contiguous.  Selections must be
        the output of numpy.s_[<args>].

        Broadcasting is supported for simple indexing.
        """
        ...

    def __array__(self, dtype=..., copy=...):  # -> _Array1D[float64]:
        """Create a Numpy array containing the whole dataset.  DON'T THINK
        THIS MEANS DATASETS ARE INTERCHANGEABLE WITH ARRAYS.  For one thing,
        you have to read the whole dataset every time this method is called.
        """
        ...

    def __repr__(self):  # -> str:
        ...

    if hasattr(h5d.DatasetID, "refresh"):
        def refresh(self):  # -> None:
            """Refresh the dataset metadata by reloading from the file.

            This is part of the SWMR features and only exist when the HDF5
            library version >=1.9.178
            """
            ...

    if hasattr(h5d.DatasetID, "flush"):
        def flush(self):  # -> None:
            """Flush the dataset data and metadata to the file.
            If the dataset is chunked, raw data chunks are written to the file.

            This is part of the SWMR features and only exist when the HDF5
            library version >=1.9.178
            """
            ...

    if vds_support:
        @property
        def is_virtual(self):
            """Check if this is a virtual dataset"""
            ...

        def virtual_sources(self):  # -> list[VDSmap]:
            """Get a list of the data mappings for a virtual dataset"""
            ...

    def make_scale(self, name=...):  # -> None:
        """Make this dataset an HDF5 dimension scale.

        You can then attach it to dimensions of other datasets like this::

            other_ds.dims[0].attach_scale(ds)

        You can optionally pass a name to associate with this scale.
        """
        ...

    @property
    def is_scale(self):
        """Return ``True`` if this dataset is also a dimension scale.

        Return ``False`` otherwise.
        """
        ...
