"""
This type stub file was generated by pyright.
"""

from . import base

"""
    Implements support for HDF5 dimension scales.
"""

class DimensionProxy(base.CommonStateObject):
    """
    Represents an HDF5 "dimension".
    """
    @property
    def label(self):  # -> None:
        """Get or set the dimension scale label"""
        ...

    @label.setter
    def label(self, val):  # -> None:
        ...
    def __init__(self, id_, dimension) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other) -> bool: ...
    def __iter__(self):  # -> Generator[Any | None, Any, None]:
        ...
    def __len__(self): ...
    def __getitem__(self, item):  # -> Dataset:
        ...
    def attach_scale(self, dset):  # -> None:
        """Attach a scale to this dimension.

        Provide the Dataset of the scale you would like to attach.
        """
        ...

    def detach_scale(self, dset):  # -> None:
        """Remove a scale from this dimension.

        Provide the Dataset of the scale you would like to remove.
        """
        ...

    def items(self):  # -> list[tuple[Any | None, Dataset]]:
        """Get a list of (name, Dataset) pairs with all scales on this
        dimension.
        """
        ...

    def keys(self):  # -> list[Any | None]:
        """Get a list of names for the scales on this dimension."""
        ...

    def values(self):  # -> list[Dataset]:
        """Get a list of Dataset for scales on this dimension."""
        ...

    def __repr__(self):  # -> str:
        ...

class DimensionManager(base.CommonStateObject):
    """
    Represents a collection of dimension associated with a dataset.

    Like AttributeManager, an instance of this class is returned when
    accessing the ".dims" property on a Dataset.
    """

    def __init__(self, parent) -> None:
        """Private constructor."""
        ...

    def __getitem__(self, index):  # -> DimensionProxy:
        """Return a Dimension object"""
        ...

    def __len__(self):
        """Number of dimensions associated with the dataset."""
        ...

    def __iter__(self):  # -> Generator[DimensionProxy, Any, None]:
        """Iterate over the dimensions."""
        ...

    def __repr__(self):  # -> str:
        ...
    def create_scale(self, dset, name=...):  # -> None:
        """Create a new dimension, from an initial scale.

        Provide the dataset and a name for the scale.
        """
        ...
